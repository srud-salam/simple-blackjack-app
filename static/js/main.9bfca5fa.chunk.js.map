{"version":3,"sources":["styles/Hand.module.css","styles/Status.module.css","styles/Card.module.css","store/deck/types.ts","components/Card.tsx","components/Hand.tsx","components/Controls.tsx","components/Status.tsx","store/deck/actions.ts","containers/App.tsx","serviceWorker.ts","store/helpers/getTotalScore.ts","store/helpers/moveCard.ts","store/deck/reducers.ts","store/index.ts","index.tsx","styles/Controls.module.css"],"names":["module","exports","ActionType","GameState","Deal","Card","props","value","suit","hidden","className","styles","hiddenCard","card","black","red","getCardSuit","Hand","title","cards","handContainer","cardContainer","map","index","key","Controls","buttonState","hitEvent","stickEvent","resetEvent","controlsContainer","onClick","disabled","hitDisabled","button","stickDisabled","resetDisabled","Status","message","statusContainer","status","drawDeckAction","gameState","type","DRAW_DECK","drawCardAction","dealType","DRAW_CARD","calculateScoreAction","CALCULATE_SCORE","App","Message","deck","useSelector","state","dispatch","useDispatch","useState","initStart","setGameState","playerCount","setPlayerCount","dealerCount","setDealerCount","hitStick","setMessage","setButtonState","useEffect","playerTurn","player","playerCards","dealer","dealerCards","playerScore","bust","dealerTurn","dealerScore","checkWin","console","log","playerWin","dealerWin","tie","REVEAL_HIDDEN_CARD","clear","Boolean","window","location","hostname","match","getTotalScore","totalScore","aces","filter","Number","isInteger","forEach","length","moveCard","Math","floor","random","deckCards","produce","s","splice","initialState","JSON","parse","stringify","jsonData","rootReducer","combineReducers","action","newState","newDeck","alert","store","createStore","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.9bfca5fa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"handContainer\":\"Hand_handContainer__LOZh9\",\"cardContainer\":\"Hand_cardContainer__3xmrW\",\"title\":\"Hand_title__dQUA2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statusContainer\":\"Status_statusContainer__2GsFH\",\"status\":\"Status_status__3cRhy\",\"value\":\"Status_value__2307s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1T9BI\",\"hiddenCard\":\"Card_hiddenCard__1tdaI\",\"black\":\"Card_black__6-MPR\",\"red\":\"Card_red__2-ltc\",\"value\":\"Card_value__KXEp3\",\"suit\":\"Card_suit__1qcc_\"};","export enum ActionType {\r\n  DRAW_DECK,\r\n  DRAW_CARD,\r\n  CALCULATE_SCORE,\r\n  REVEAL_HIDDEN_CARD,\r\n}\r\n\r\nexport enum GameState {\r\n  initStart,\r\n  playerTurn,\r\n  dealerTurn,\r\n}\r\n\r\nexport enum Deal {\r\n  player,\r\n  dealer,\r\n  hidden,\r\n}\r\n\r\nexport interface Card {\r\n  value: string;\r\n  suit: string;\r\n  hidden: boolean;\r\n}\r\n\r\nexport interface DeckState {\r\n  deckCards: Card[];\r\n  playerCards: Card[];\r\n  dealerCards: Card[];\r\n  playerScore: number;\r\n  dealerScore: number;\r\n}\r\n\r\nexport type DrawDeckAction = {\r\n  type: ActionType.DRAW_DECK;\r\n  gameState: GameState;\r\n};\r\nexport type DrawCardAction = { type: ActionType.DRAW_CARD; dealType: Deal };\r\nexport type CalculateScoreAction = {\r\n  type: ActionType.CALCULATE_SCORE;\r\n  dealType: Deal;\r\n};\r\nexport type ReavelHiddenCardAction = {\r\n  type: ActionType.REVEAL_HIDDEN_CARD;\r\n  hidden: boolean;\r\n};\r\n\r\nexport type DeckActionTypes =\r\n  | DrawDeckAction\r\n  | DrawCardAction\r\n  | CalculateScoreAction\r\n  | ReavelHiddenCardAction;\r\n","import React from \"react\";\r\nimport styles from \"../styles/Card.module.css\";\r\n\r\ntype CardProps = {\r\n  value: string;\r\n  suit: string;\r\n  hidden: boolean;\r\n};\r\n\r\nconst Card: React.FC<CardProps> = (props) => {\r\n  const { value, suit, hidden } = props;\r\n  const getCardSuit = () => {\r\n    switch (suit) {\r\n      case \"spades\":\r\n        return \"♠\";\r\n      case \"diamonds\":\r\n        return \"♦\";\r\n      case \"clubs\":\r\n        return \"♣\";\r\n      case \"hearts\":\r\n        return \"♥\";\r\n    }\r\n  };\r\n\r\n  if (hidden) {\r\n    return <div className={styles.hiddenCard} />;\r\n  }\r\n  return (\r\n    <div className={styles.card}>\r\n      <div\r\n        className={\r\n          suit === \"spades\" || suit === \"clubs\" ? styles.black : styles.red\r\n        }\r\n      >\r\n        <h1 className={styles.value}>{value}</h1>\r\n        <h1 className={styles.suit}>{getCardSuit()}</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport styles from \"../styles/Hand.module.css\";\r\nimport Card from \"./Card\";\r\n\r\ntype HandProps = {\r\n  title: string;\r\n  cards: any[];\r\n};\r\n\r\nconst Hand: React.FC<HandProps> = (props) => {\r\n  const { title, cards } = props;\r\n\r\n  return (\r\n    <div className={styles.handContainer}>\r\n      <h1 className={styles.title}>{title}</h1>\r\n      <div className={styles.cardContainer}>\r\n        {cards.map((card, index) => (\r\n          <Card\r\n            key={index}\r\n            value={card.value}\r\n            suit={card.suit}\r\n            hidden={card.hidden}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Hand;\r\n","import React from \"react\";\r\nimport styles from \"../styles/Controls.module.css\";\r\n\r\ntype ControlsProps = {\r\n  buttonState: any,\r\n  hitEvent: any,\r\n  stickEvent: any,\r\n  resetEvent: any\r\n};\r\n\r\nconst Controls: React.FC<ControlsProps> = ({ buttonState, hitEvent, stickEvent, resetEvent }) => { \r\n     return (\r\n       <div className={styles.controlsContainer}>\r\n         <button onClick={() => hitEvent()} disabled={buttonState.hitDisabled} className={styles.button}>\r\n           Hit\r\n         </button>\r\n         <button onClick={() => stickEvent()} disabled={buttonState.stickDisabled} className={styles.button}>\r\n           Stick\r\n         </button>\r\n         <button onClick={() => resetEvent()} disabled={buttonState.resetDisabled} className={styles.button}>\r\n           Reset\r\n         </button>\r\n       </div>\r\n     );\r\n}\r\n\r\nexport default Controls;","import React from \"react\";\r\nimport styles from \"../styles/Status.module.css\";\r\n\r\ntype StatusProps = {\r\n  message: string;\r\n};\r\n\r\nconst Status: React.FC<StatusProps> = ({ message }) => {\r\n  return (\r\n    <div className={styles.statusContainer}>\r\n      <div className={styles.status}>\r\n        <h1 className={styles.value}>{message}</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Status;\r\n","import { DeckActionTypes, GameState, ActionType, Deal } from \"./types\";\r\n\r\nexport const drawDeckAction = (gameState: GameState): DeckActionTypes => ({\r\n  type: ActionType.DRAW_DECK,\r\n  gameState,\r\n});\r\n\r\nexport const drawCardAction = (dealType: Deal): DeckActionTypes => ({\r\n  type: ActionType.DRAW_CARD,\r\n  dealType,\r\n});\r\n\r\nexport const calculateScoreAction = (dealType: Deal): DeckActionTypes => ({\r\n  type: ActionType.CALCULATE_SCORE,\r\n  dealType,\r\n});\r\n\r\nexport const reavelHiddenCardAction = (hidden: boolean): DeckActionTypes => ({\r\n  type: ActionType.REVEAL_HIDDEN_CARD,\r\n  hidden,\r\n});\r\n","import React, { useState, useEffect} from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport Hand from \"../components/Hand\";\r\nimport Controls from \"../components/Controls\";\r\nimport Status from '../components/Status';\r\nimport {RootState} from \"../store\";\r\nimport {DeckState, Deal} from \"../store/deck/types\";\r\nimport {drawDeckAction, drawCardAction, calculateScoreAction, reavelHiddenCardAction} from \"../store/deck/actions\";\r\n\r\nconst App: React.FC = () => {\r\n\t\r\n  const deck = useSelector<RootState, DeckState>(state => state.deck);\r\n  const dispatch = useDispatch();\r\n  \r\n  enum GameState {\r\n    initStart,\r\n    playerTurn,\r\n    dealerTurn,\r\n  }\r\n\r\n  enum Message {\r\n    hitStick = \"Hit or Stick?\",\r\n    bust = \"Bust!\",\r\n    playerWin = \"You Win!\",\r\n    dealerWin = \"Dealer Wins!\",\r\n    tie = \"Tie!\",\r\n  }\r\n\r\n  const [gameState, setGameState] = useState(GameState.initStart);\r\n  const [playerCount, setPlayerCount] = useState(0);\r\n  const [dealerCount, setDealerCount] = useState(0);\r\n  const [message, setMessage] = useState(Message.hitStick);\r\n  const [buttonState, setButtonState] = useState({\r\n    hitDisabled: false,\r\n    stickDisabled: false,\r\n    resetDisabled: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (gameState === GameState.initStart) {\r\n\t  dispatch(drawDeckAction(GameState.initStart));\r\n      setGameState(GameState.playerTurn);\r\n      setMessage(Message.hitStick);\r\n    }\r\n  }, [gameState]);\r\n\r\n  useEffect(() => {\r\n\tdispatch(calculateScoreAction(Deal.player));\r\n    setPlayerCount(playerCount + 1);\r\n  }, [deck.playerCards]);\r\n\r\n  useEffect(() => {\r\n\tdispatch(calculateScoreAction(Deal.dealer));\r\n    setDealerCount(dealerCount + 1);\r\n  }, [deck.dealerCards]);\r\n\r\n   useEffect(() => {\r\n    if (gameState === GameState.playerTurn) {\r\n      if (deck.playerScore === 21) {\r\n        buttonState.hitDisabled = true;\r\n        setButtonState({ ...buttonState });\r\n      }\r\n      else if (deck.playerScore > 21) {\r\n        bust();\r\n      }\r\n    }\r\n  }, [playerCount]);\r\n  \r\n  useEffect(() => {\r\n    if (gameState === GameState.dealerTurn) {\r\n      if (deck.dealerScore >= 17) {\r\n        checkWin();\r\n      }\r\n      else {\r\n       dispatch(drawCardAction(Deal.dealer));\t\r\n      }\r\n    }\r\n  }, [dealerCount]);\r\n  \r\n   const resetGame = () => {\r\n    console.clear();\r\n\tdispatch(drawDeckAction(GameState.initStart));\r\n\t\r\n    setPlayerCount(0);\r\n    setDealerCount(0);\r\n\r\n    setGameState(GameState.initStart);\r\n    setMessage(Message.hitStick);\r\n    setButtonState({\r\n      hitDisabled: false,\r\n\t  stickDisabled: false,\r\n      resetDisabled: true\r\n    });\r\n  }\r\n \r\n  const hit = () => {\r\n\tconsole.log(\"hit: \");\r\n\tdispatch(drawCardAction(Deal.player));\r\n  }\r\n  \r\n   const stick = () => {\r\n\tconsole.log(\"stick: \");\r\n    buttonState.hitDisabled = true;\r\n    buttonState.stickDisabled = true;\r\n    buttonState.resetDisabled = false;\r\n    setButtonState({ ...buttonState });\r\n    setGameState(GameState.dealerTurn);\r\n\tdispatch(reavelHiddenCardAction(false));\r\n  }\r\n\r\n  const bust = () => {\r\n\tconsole.log(\"bust: \");\r\n    buttonState.hitDisabled = true;\r\n    buttonState.stickDisabled = true;\r\n    buttonState.resetDisabled = false;\r\n    setButtonState({ ...buttonState });\r\n    setMessage(Message.bust);\r\n  }\r\n\r\n  const checkWin = () => {\r\n    if (deck.playerScore > deck.dealerScore || deck.dealerScore > 21) {\r\n      setMessage(Message.playerWin);\r\n    }\r\n    else if (deck.dealerScore > deck.playerScore) {\r\n      setMessage(Message.dealerWin);\r\n    }\r\n    else {\r\n      setMessage(Message.tie);\r\n    }\r\n  }\r\n\r\n   return (\r\n    <div>\r\n      <Status message={message} />\r\n      <Hand title={`Dealer's Hand (${deck.dealerScore})`} cards={deck.dealerCards} />\r\n      <Hand title={`Your Hand (${deck.playerScore})`} cards={deck.playerCards} />\r\n\t  <Controls\r\n        buttonState={buttonState}\r\n        hitEvent={hit}\r\n        stickEvent={stick}\r\n        resetEvent={resetGame}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Card } from \"../deck/types\";\r\n\r\nexport const getTotalScore = (cards: Card[]) => {\r\n  let totalScore: number = 0;\r\n\r\n  const aces = cards.filter((card) => {\r\n    if (card.hidden === false) {\r\n      if (card.value === \"K\" || card.value === \"Q\" || card.value === \"J\") {\r\n        totalScore += 10;\r\n        return false;\r\n      }\r\n\r\n      if (Number.isInteger(+card.value)) {\r\n        totalScore += +card.value;\r\n        return false;\r\n      }\r\n    }\r\n    return card.value === \"A\" && card.hidden === false;\r\n  });\r\n\r\n  aces.forEach((card: Card) => {\r\n    if (card.hidden === false) {\r\n      if (totalScore + 11 > 21) {\r\n        totalScore += 1;\r\n      } else if (totalScore + 11 === 21) {\r\n        if (aces.length > 1) {\r\n          totalScore += 1;\r\n        } else {\r\n          totalScore += 11;\r\n        }\r\n      } else {\r\n        totalScore += 11;\r\n      }\r\n    }\r\n  });\r\n\r\n  return totalScore;\r\n};\r\n","import { Card, DeckState, Deal } from \"../deck/types\";\r\nimport produce from \"immer\";\r\n\r\nexport const moveCard = (state: DeckState, dealType: Deal) => {\r\n  const key: number = Math.floor(Math.random() * state.deckCards.length);\r\n  const card: Card = state.deckCards[key];\r\n\r\n  if (dealType === Deal.player) {\r\n    return produce(state, (s) => {\r\n      s.deckCards.splice(key, 1);\r\n      s.playerCards = [...s.playerCards, { ...card, hidden: false }];\r\n    });\r\n  }\r\n\r\n  if (dealType === Deal.dealer) {\r\n    return produce(state, (s) => {\r\n      s.deckCards.splice(key, 1);\r\n      s.dealerCards = [...s.dealerCards, { ...card, hidden: false }];\r\n    });\r\n  }\r\n\r\n  return produce(state, (s) => {\r\n    s.deckCards.splice(key, 1);\r\n    s.dealerCards = [...s.dealerCards, { ...card, hidden: true }];\r\n  });\r\n};\r\n","import { Card, DeckState, DeckActionTypes, ActionType, Deal } from \"./types\";\r\nimport jsonData from \"./deck.json\";\r\nimport produce from \"immer\";\r\nimport { getTotalScore } from \"../helpers/getTotalScore\";\r\nimport { moveCard } from \"../helpers/moveCard\";\r\n\r\nconst initialState: DeckState = {\r\n  deckCards: JSON.parse(JSON.stringify(jsonData.cards)),\r\n  playerCards: [] as Card[],\r\n  dealerCards: [] as Card[],\r\n  playerScore: 0,\r\n  dealerScore: 0,\r\n};\r\n\r\nexport const deckReducer = (\r\n  state: DeckState = initialState,\r\n  action: DeckActionTypes\r\n): DeckState => {\r\n  switch (action.type) {\r\n    case ActionType.DRAW_DECK:\r\n      const newState = initialState;\r\n      let newDeck = moveCard(newState, Deal.player);\r\n      newDeck = moveCard(newDeck, Deal.hidden);\r\n      newDeck = moveCard(newDeck, Deal.player);\r\n      newDeck = moveCard(newDeck, Deal.dealer);\r\n      return newDeck;\r\n\r\n    case ActionType.DRAW_CARD:\r\n      if (state.deckCards.length > 0) {\r\n        return moveCard(state, action.dealType);\r\n      }\r\n\r\n      alert(\"All cards have been drawn\");\r\n      return state;\r\n\r\n    case ActionType.CALCULATE_SCORE:\r\n      if (action.dealType === Deal.player) {\r\n        return produce(state, (s: DeckState) => {\r\n          s.playerScore = getTotalScore(state.playerCards);\r\n        });\r\n      }\r\n\r\n      if (action.dealType === Deal.dealer) {\r\n        return produce(state, (s: DeckState) => {\r\n          s.dealerScore = getTotalScore(state.dealerCards);\r\n        });\r\n      }\r\n      return state;\r\n\r\n    case ActionType.REVEAL_HIDDEN_CARD:\r\n      return produce(state, (s: DeckState) => {\r\n        const dealerCards = s.dealerCards.filter((card: Card) => {\r\n          if (card.hidden) card.hidden = action.hidden;\r\n          return card;\r\n        });\r\n\r\n        s.dealerCards = [...dealerCards];\r\n      });\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport reduxImmutableStateInvariant from \"redux-immutable-state-invariant\";\r\nimport { deckReducer } from \"./deck/reducers\";\r\n\r\nconst rootReducer = combineReducers({\r\n  deck: deckReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\nexport const store = createStore(rootReducer, composeWithDevTools());\r\n//composeWithDevTools(applyMiddleware(reduxImmutableStateInvariant())));\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./containers/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controlsContainer\":\"Controls_controlsContainer__l7QqA\",\"button\":\"Controls_button__11tg7\"};"],"sourceRoot":""}